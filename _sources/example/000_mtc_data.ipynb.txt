{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# MTC Work Mode Choice Data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The MTC sample dataset is the same data used in the Self Instructing Manual for discrete choice modeling:\n",
    "\n",
    "> The San Francisco Bay Area work mode choice data set comprises 5029 home-to-work commute trips in the\n",
    "> San Francisco Bay Area. The data is drawn from the San Francisco Bay Area Household Travel Survey\n",
    "> conducted by the Metropolitan Transportation Commission (MTC) in the spring and fall of 1990. This\n",
    "> survey included a one day travel diary for each household member older than five years and detailed\n",
    "> individual and household socio-demographic information."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import larch\n",
    "import pandas\n",
    "import os\n",
    "import gzip"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "In this example we will import the MTC example dataset, starting from a csv\n",
    "text file in |idca| format.  Suppose that data file is gzipped, named \"MTCwork.csv.gz\" and\n",
    "is located in the current directory (use :func:`os.getcwd` to see what is the\n",
    "current directory).  For this example, we'll use the `example_file` method to find\n",
    "the file that comes with Larch.\n",
    "\n",
    "We can take a peek at the contents of the file, examining the first 10 lines:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "from larch.data_warehouse import example_file"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "doc_only": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "casenum,altnum,chose,ivtt,ovtt,tottime,totcost,hhid,perid,numalts,dist,wkzone,hmzone,rspopden,rsempden,wkpopden,wkempden,vehavdum,femdum,age,drlicdum,noncadum,numveh,hhsize,hhinc,famtype,hhowndum,numemphh,numadlt,nmlt5,nm5to11,nm12to16,wkccbd,wknccbd,corredis,vehbywrk,vocc,wgt\n",
      " 1,1,1,13.38,2,15.38,70.63,2,1,2,7.69,664,726,15.52,9.96,37.26,3.48,1,0,35,1,0,4,1,42.5,7,0,1,1,0,0,0,0,0,0,4,1,1\n",
      " 1,2,0,18.38,2,20.38,35.32,2,1,2,7.69,664,726,15.52,9.96,37.26,3.48,1,0,35,1,0,4,1,42.5,7,0,1,1,0,0,0,0,0,0,4,1,1\n",
      " 1,3,0,20.38,2,22.38,20.18,2,1,2,7.69,664,726,15.52,9.96,37.26,3.48,1,0,35,1,0,4,1,42.5,7,0,1,1,0,0,0,0,0,0,4,1,1\n",
      " 1,4,0,25.9,15.2,41.1,115.64,2,1,2,7.69,664,726,15.52,9.96,37.26,3.48,1,0,35,1,0,4,1,42.5,7,0,1,1,0,0,0,0,0,0,4,1,1\n",
      " 1,5,0,40.5,2,42.5,0,2,1,2,7.69,664,726,15.52,9.96,37.26,3.48,1,0,35,1,0,4,1,42.5,7,0,1,1,0,0,0,0,0,0,4,1,1\n",
      " 2,1,0,29.92,10,39.92,390.81,3,1,2,11.62,738,9,35.81,53.33,32.91,764.19,1,0,40,1,0,1,1,17.5,7,0,1,1,0,0,0,1,0,1,1,0,1\n",
      " 2,2,0,34.92,10,44.92,195.4,3,1,2,11.62,738,9,35.81,53.33,32.91,764.19,1,0,40,1,0,1,1,17.5,7,0,1,1,0,0,0,1,0,1,1,0,1\n",
      " 2,3,0,21.92,10,31.92,97.97,3,1,2,11.62,738,9,35.81,53.33,32.91,764.19,1,0,40,1,0,1,1,17.5,7,0,1,1,0,0,0,1,0,1,1,0,1\n",
      " 2,4,1,22.96,14.2,37.16,185,3,1,2,11.62,738,9,35.81,53.33,32.91,764.19,1,0,40,1,0,1,1,17.5,7,0,1,1,0,0,0,1,0,1,1,0,1\n",
      "\n"
     ]
    }
   ],
   "source": [
    "with gzip.open(example_file(\"MTCwork.csv.gz\"), 'rt') as previewfile:\n",
    "    print(*(next(previewfile) for x in range(10)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The first line of the file contains column headers. After that, each line represents\n",
    "an alternative available to a decision maker. In our sample data, we see the first 5\n",
    "lines of data share a ``caseid`` of 1, indicating that they are 5 different alternatives\n",
    "available to the first decision maker.  The identity of the alternatives is given by the\n",
    "number in the column ``altid``. The observed choice of the decision maker is\n",
    "indicated in the column ``chose`` with a 1 in the appropriate row. \n",
    "\n",
    "We can load this data easily using pandas.  We'll also set the index of the resulting DataFrame to\n",
    "be the case and alt identifiers.\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pandas.read_csv(example_file(\"MTCwork.csv.gz\"))\n",
    "df.set_index(['casenum','altnum'], inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>chose</th>\n",
       "      <th>ivtt</th>\n",
       "      <th>ovtt</th>\n",
       "      <th>tottime</th>\n",
       "      <th>totcost</th>\n",
       "      <th>hhid</th>\n",
       "      <th>perid</th>\n",
       "      <th>numalts</th>\n",
       "      <th>dist</th>\n",
       "      <th>wkzone</th>\n",
       "      <th>...</th>\n",
       "      <th>numadlt</th>\n",
       "      <th>nmlt5</th>\n",
       "      <th>nm5to11</th>\n",
       "      <th>nm12to16</th>\n",
       "      <th>wkccbd</th>\n",
       "      <th>wknccbd</th>\n",
       "      <th>corredis</th>\n",
       "      <th>vehbywrk</th>\n",
       "      <th>vocc</th>\n",
       "      <th>wgt</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>casenum</th>\n",
       "      <th>altnum</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"5\" valign=\"top\">1</th>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>13.38</td>\n",
       "      <td>2.0</td>\n",
       "      <td>15.38</td>\n",
       "      <td>70.63</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>7.69</td>\n",
       "      <td>664</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4.00</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>18.38</td>\n",
       "      <td>2.0</td>\n",
       "      <td>20.38</td>\n",
       "      <td>35.32</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>7.69</td>\n",
       "      <td>664</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4.00</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>20.38</td>\n",
       "      <td>2.0</td>\n",
       "      <td>22.38</td>\n",
       "      <td>20.18</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>7.69</td>\n",
       "      <td>664</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4.00</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>25.90</td>\n",
       "      <td>15.2</td>\n",
       "      <td>41.10</td>\n",
       "      <td>115.64</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>7.69</td>\n",
       "      <td>664</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4.00</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0</td>\n",
       "      <td>40.50</td>\n",
       "      <td>2.0</td>\n",
       "      <td>42.50</td>\n",
       "      <td>0.00</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>7.69</td>\n",
       "      <td>664</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4.00</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"5\" valign=\"top\">2</th>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>29.92</td>\n",
       "      <td>10.0</td>\n",
       "      <td>39.92</td>\n",
       "      <td>390.81</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>11.62</td>\n",
       "      <td>738</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>34.92</td>\n",
       "      <td>10.0</td>\n",
       "      <td>44.92</td>\n",
       "      <td>195.40</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>11.62</td>\n",
       "      <td>738</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>21.92</td>\n",
       "      <td>10.0</td>\n",
       "      <td>31.92</td>\n",
       "      <td>97.97</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>11.62</td>\n",
       "      <td>738</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>22.96</td>\n",
       "      <td>14.2</td>\n",
       "      <td>37.16</td>\n",
       "      <td>185.00</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>11.62</td>\n",
       "      <td>738</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0</td>\n",
       "      <td>58.95</td>\n",
       "      <td>10.0</td>\n",
       "      <td>68.95</td>\n",
       "      <td>0.00</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>11.62</td>\n",
       "      <td>738</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">3</th>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>8.60</td>\n",
       "      <td>6.0</td>\n",
       "      <td>14.60</td>\n",
       "      <td>37.76</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>4.10</td>\n",
       "      <td>696</td>\n",
       "      <td>...</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0.33</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>13.60</td>\n",
       "      <td>6.0</td>\n",
       "      <td>19.60</td>\n",
       "      <td>18.88</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>4.10</td>\n",
       "      <td>696</td>\n",
       "      <td>...</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0.33</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>12 rows × 36 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                chose   ivtt  ovtt  tottime  totcost  hhid  perid  numalts  \\\n",
       "casenum altnum                                                               \n",
       "1       1           1  13.38   2.0    15.38    70.63     2      1        2   \n",
       "        2           0  18.38   2.0    20.38    35.32     2      1        2   \n",
       "        3           0  20.38   2.0    22.38    20.18     2      1        2   \n",
       "        4           0  25.90  15.2    41.10   115.64     2      1        2   \n",
       "        5           0  40.50   2.0    42.50     0.00     2      1        2   \n",
       "2       1           0  29.92  10.0    39.92   390.81     3      1        2   \n",
       "        2           0  34.92  10.0    44.92   195.40     3      1        2   \n",
       "        3           0  21.92  10.0    31.92    97.97     3      1        2   \n",
       "        4           1  22.96  14.2    37.16   185.00     3      1        2   \n",
       "        5           0  58.95  10.0    68.95     0.00     3      1        2   \n",
       "3       1           1   8.60   6.0    14.60    37.76     5      1        2   \n",
       "        2           0  13.60   6.0    19.60    18.88     5      1        2   \n",
       "\n",
       "                 dist  wkzone ...   numadlt  nmlt5  nm5to11  nm12to16  wkccbd  \\\n",
       "casenum altnum                ...                                               \n",
       "1       1        7.69     664 ...         1      0        0         0       0   \n",
       "        2        7.69     664 ...         1      0        0         0       0   \n",
       "        3        7.69     664 ...         1      0        0         0       0   \n",
       "        4        7.69     664 ...         1      0        0         0       0   \n",
       "        5        7.69     664 ...         1      0        0         0       0   \n",
       "2       1       11.62     738 ...         1      0        0         0       1   \n",
       "        2       11.62     738 ...         1      0        0         0       1   \n",
       "        3       11.62     738 ...         1      0        0         0       1   \n",
       "        4       11.62     738 ...         1      0        0         0       1   \n",
       "        5       11.62     738 ...         1      0        0         0       1   \n",
       "3       1        4.10     696 ...         3      2        0         0       0   \n",
       "        2        4.10     696 ...         3      2        0         0       0   \n",
       "\n",
       "                wknccbd  corredis  vehbywrk  vocc  wgt  \n",
       "casenum altnum                                          \n",
       "1       1             0         0      4.00     1    1  \n",
       "        2             0         0      4.00     1    1  \n",
       "        3             0         0      4.00     1    1  \n",
       "        4             0         0      4.00     1    1  \n",
       "        5             0         0      4.00     1    1  \n",
       "2       1             0         1      1.00     0    1  \n",
       "        2             0         1      1.00     0    1  \n",
       "        3             0         1      1.00     0    1  \n",
       "        4             0         1      1.00     0    1  \n",
       "        5             0         1      1.00     0    1  \n",
       "3       1             1         0      0.33     1    1  \n",
       "        2             1         0      0.33     1    1  \n",
       "\n",
       "[12 rows x 36 columns]"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head(12)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "doc_only": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "MultiIndex: 22033 entries, (1, 1) to (5029, 6)\n",
      "Data columns (total 36 columns):\n",
      "chose       22033 non-null int64\n",
      "ivtt        22033 non-null float64\n",
      "ovtt        22033 non-null float64\n",
      "tottime     22033 non-null float64\n",
      "totcost     22033 non-null float64\n",
      "hhid        22033 non-null int64\n",
      "perid       22033 non-null int64\n",
      "numalts     22033 non-null int64\n",
      "dist        22033 non-null float64\n",
      "wkzone      22033 non-null int64\n",
      "hmzone      22033 non-null int64\n",
      "rspopden    22033 non-null float64\n",
      "rsempden    22033 non-null float64\n",
      "wkpopden    22033 non-null float64\n",
      "wkempden    22033 non-null float64\n",
      "vehavdum    22033 non-null int64\n",
      "femdum      22033 non-null int64\n",
      "age         22033 non-null int64\n",
      "drlicdum    22033 non-null int64\n",
      "noncadum    22033 non-null int64\n",
      "numveh      22033 non-null int64\n",
      "hhsize      22033 non-null int64\n",
      "hhinc       22033 non-null float64\n",
      "famtype     22033 non-null int64\n",
      "hhowndum    22033 non-null int64\n",
      "numemphh    22033 non-null int64\n",
      "numadlt     22033 non-null int64\n",
      "nmlt5       22033 non-null int64\n",
      "nm5to11     22033 non-null int64\n",
      "nm12to16    22033 non-null int64\n",
      "wkccbd      22033 non-null int64\n",
      "wknccbd     22033 non-null int64\n",
      "corredis    22033 non-null int64\n",
      "vehbywrk    22033 non-null float64\n",
      "vocc        22033 non-null int64\n",
      "wgt         22033 non-null int64\n",
      "dtypes: float64(11), int64(25)\n",
      "memory usage: 6.2 MB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "converting data_co to <class 'numpy.float64'>\n"
     ]
    }
   ],
   "source": [
    "d = larch.DataFrames.from_idce(df, choice='chose', crack=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "doc_only": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "larch.DataFrames:\n",
      "  n_cases: 5029\n",
      "  n_alts: 6\n",
      "  data_ce:\n",
      "    - ivtt\n",
      "    - ovtt\n",
      "    - tottime\n",
      "    - totcost\n",
      "  data_co:\n",
      "    - hhid\n",
      "    - perid\n",
      "    - numalts\n",
      "    - dist\n",
      "    - wkzone\n",
      "    - hmzone\n",
      "    - rspopden\n",
      "    - rsempden\n",
      "    - wkpopden\n",
      "    - wkempden\n",
      "    - vehavdum\n",
      "    - femdum\n",
      "    - age\n",
      "    - drlicdum\n",
      "    - noncadum\n",
      "    - numveh\n",
      "    - hhsize\n",
      "    - hhinc\n",
      "    - famtype\n",
      "    - hhowndum\n",
      "    - numemphh\n",
      "    - numadlt\n",
      "    - nmlt5\n",
      "    - nm5to11\n",
      "    - nm12to16\n",
      "    - wkccbd\n",
      "    - wknccbd\n",
      "    - corredis\n",
      "    - vehbywrk\n",
      "    - vocc\n",
      "    - wgt\n",
      "  data_av: <populated>\n",
      "  data_ch: chose\n"
     ]
    }
   ],
   "source": [
    "d.info()"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "By setting `crack` to `True`, Larch automatically analyzed the data to find variables that do not vary within\n",
    "cases, and transformed those into |idco| format variables.  If you would prefer that\n",
    "Larch not do this you can omit this argument or set it to False.  This is particularly\n",
    "important for larger datasets (the data sample included is only a tiny extract of the data\n",
    "that might be available for this kind of model), as breaking the data into seperate |idca| and |idco| parts is\n",
    "a relatively expensive operation, and it is not actually required for most model structures.\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Int64Index([1, 2, 3, 4, 5, 6], dtype='int64', name='altnum')"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "d.alternative_codes()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "d.alternative_names()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The set of all possible alternative codes is deduced automatically from all the values\n",
    "in the `altid` column.  However, the alterative codes are not very descriptive when\n",
    "they are set automatically, as the csv data file does not have enough information to\n",
    "tell what each alternative code number means."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "d.set_alternative_names({\n",
    "    1: 'DA',\n",
    "    2: 'SR2',\n",
    "    3: 'SR3+',\n",
    "    4: 'Transit',\n",
    "    5: 'Bike',\n",
    "    6: 'Walk',\n",
    "})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['DA', 'SR2', 'SR3+', 'Transit', 'Bike', 'Walk']"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "d.alternative_names()"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    ".. |idca| replace:: :ref:`idca <idca>`\n",
    ".. |idco| replace:: :ref:`idco <idco>`"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Taiga 3.7",
   "language": "python",
   "name": "taiga37"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
