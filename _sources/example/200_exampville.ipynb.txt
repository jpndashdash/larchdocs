{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 200: Exampville Simulated Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'5.4.0'"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import larch, numpy, pandas, os, geopandas\n",
    "larch.__version__"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Welcome to Exampville, the best simulated town in this here part of the internet!\n",
    "\n",
    "Exampville is provided with Larch to illustrate the\n",
    "kind of data that a transportation planner might have available when building\n",
    "a travel model.  This data is almost entirely fictional."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import larch.exampville"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## TAZ Shapefile"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The shapefile that includes a map of the travel analysis zones\n",
    "in Exampville is stored in a zip file."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'../../data_warehouse/exampville_taz.zip'"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "larch.exampville.files.shapefile"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Geopandas can open and read this data directly with unzipping it on\n",
    "disk first, by including the \"zip://\" protocol in front of the filename."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "taz_shape = geopandas.read_file(\"zip://\"+larch.exampville.files.shapefile)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "doc_only": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "taz_shape.plot(edgecolor='k');"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## TAZ Employment Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'../../data_warehouse/exampville_employment.csv.gz'"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "larch.exampville.files.employment"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "emp = pandas.read_csv(larch.exampville.files.employment, index_col='TAZ')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "doc_only": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 40 entries, 1 to 40\n",
      "Data columns (total 3 columns):\n",
      " #   Column         Non-Null Count  Dtype\n",
      "---  ------         --------------  -----\n",
      " 0   NONRETAIL_EMP  40 non-null     int64\n",
      " 1   RETAIL_EMP     40 non-null     int64\n",
      " 2   TOTAL_EMP      40 non-null     int64\n",
      "dtypes: int64(3)\n",
      "memory usage: 1.2 KB\n"
     ]
    }
   ],
   "source": [
    "emp.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>NONRETAIL_EMP</th>\n",
       "      <th>RETAIL_EMP</th>\n",
       "      <th>TOTAL_EMP</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>TAZ</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>118</td>\n",
       "      <td>340</td>\n",
       "      <td>458</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>91</td>\n",
       "      <td>0</td>\n",
       "      <td>91</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>197</td>\n",
       "      <td>2</td>\n",
       "      <td>199</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>277</td>\n",
       "      <td>8</td>\n",
       "      <td>285</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>44</td>\n",
       "      <td>13</td>\n",
       "      <td>57</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     NONRETAIL_EMP  RETAIL_EMP  TOTAL_EMP\n",
       "TAZ                                      \n",
       "1              118         340        458\n",
       "2               91           0         91\n",
       "3              197           2        199\n",
       "4              277           8        285\n",
       "5               44          13         57"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "emp.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Skims"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The network skims for Exampville are stored in open matrix format.\n",
    "Larch includes a OMX reader, which also embeds a number of handy\n",
    "tools for processing OMX data into formats useful for discrete choice\n",
    "analysis."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'../../data_warehouse/exampville_skims.omx'"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "larch.exampville.files.skims"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<larch.OMX> ⋯/exampville_skims.omx\n",
       " |  shape:(40, 40)\n",
       " |  data:\n",
       " |    AUTO_COST    (float64)\n",
       " |    AUTO_DIST    (float64)\n",
       " |    AUTO_TIME    (float64)\n",
       " |    BIKE_TIME    (float64)\n",
       " |    TRANSIT_FARE (float64)\n",
       " |    TRANSIT_IVTT (float64)\n",
       " |    TRANSIT_OVTT (float64)\n",
       " |    WALK_DIST    (float64)\n",
       " |    WALK_TIME    (float64)\n",
       " |  lookup:\n",
       " |    TAZ_AREA_TYPE (40 |S3)\n",
       " |    TAZ_ID        (40 int64)"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "skims = larch.OMX( larch.exampville.files.skims, mode='r' )\n",
    "skims"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Households"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'../../data_warehouse/exampville_households.csv.gz'"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "larch.exampville.files.hh"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "hh = pandas.read_csv( larch.exampville.files.hh )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "doc_only": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 5000 entries, 0 to 4999\n",
      "Data columns (total 13 columns):\n",
      " #   Column       Non-Null Count  Dtype  \n",
      "---  ------       --------------  -----  \n",
      " 0   X            5000 non-null   float64\n",
      " 1   Y            5000 non-null   float64\n",
      " 2   INCOME       5000 non-null   float64\n",
      " 3   N_VEHICLES   5000 non-null   int64  \n",
      " 4   HHSIZE       5000 non-null   int64  \n",
      " 5   geometry     5000 non-null   object \n",
      " 6   HOMETAZ      5000 non-null   int64  \n",
      " 7   HHID         5000 non-null   int64  \n",
      " 8   N_TRIPS      5000 non-null   int64  \n",
      " 9   N_TRIPS_HBW  5000 non-null   int64  \n",
      " 10  N_TRIPS_HBO  5000 non-null   int64  \n",
      " 11  N_TRIPS_NHB  5000 non-null   int64  \n",
      " 12  N_WORKERS    5000 non-null   int64  \n",
      "dtypes: float64(3), int64(9), object(1)\n",
      "memory usage: 507.9+ KB\n"
     ]
    }
   ],
   "source": [
    "hh.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>X</th>\n",
       "      <th>Y</th>\n",
       "      <th>INCOME</th>\n",
       "      <th>N_VEHICLES</th>\n",
       "      <th>HHSIZE</th>\n",
       "      <th>geometry</th>\n",
       "      <th>HOMETAZ</th>\n",
       "      <th>HHID</th>\n",
       "      <th>N_TRIPS</th>\n",
       "      <th>N_TRIPS_HBW</th>\n",
       "      <th>N_TRIPS_HBO</th>\n",
       "      <th>N_TRIPS_NHB</th>\n",
       "      <th>N_WORKERS</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>361.35</td>\n",
       "      <td>33.34</td>\n",
       "      <td>6026.0</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>POINT (361.35 33.34)</td>\n",
       "      <td>22</td>\n",
       "      <td>50000</td>\n",
       "      <td>15</td>\n",
       "      <td>6</td>\n",
       "      <td>8</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>272.08</td>\n",
       "      <td>30.77</td>\n",
       "      <td>30538.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>POINT (272.08 30.77)</td>\n",
       "      <td>22</td>\n",
       "      <td>50001</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>424.18</td>\n",
       "      <td>72.55</td>\n",
       "      <td>24131.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>POINT (424.18 72.55)</td>\n",
       "      <td>22</td>\n",
       "      <td>50002</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>464.48</td>\n",
       "      <td>61.30</td>\n",
       "      <td>34838.0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>POINT (464.48 61.3)</td>\n",
       "      <td>22</td>\n",
       "      <td>50003</td>\n",
       "      <td>16</td>\n",
       "      <td>3</td>\n",
       "      <td>7</td>\n",
       "      <td>6</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>328.95</td>\n",
       "      <td>129.36</td>\n",
       "      <td>29337.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>POINT (328.95 129.36)</td>\n",
       "      <td>22</td>\n",
       "      <td>50004</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        X       Y   INCOME  N_VEHICLES  HHSIZE               geometry  \\\n",
       "0  361.35   33.34   6026.0           1       4   POINT (361.35 33.34)   \n",
       "1  272.08   30.77  30538.0           0       1   POINT (272.08 30.77)   \n",
       "2  424.18   72.55  24131.0           1       1   POINT (424.18 72.55)   \n",
       "3  464.48   61.30  34838.0           1       2    POINT (464.48 61.3)   \n",
       "4  328.95  129.36  29337.0           0       1  POINT (328.95 129.36)   \n",
       "\n",
       "   HOMETAZ   HHID  N_TRIPS  N_TRIPS_HBW  N_TRIPS_HBO  N_TRIPS_NHB  N_WORKERS  \n",
       "0       22  50000       15            6            8            1          3  \n",
       "1       22  50001        4            1            1            2          1  \n",
       "2       22  50002        6            0            4            2          0  \n",
       "3       22  50003       16            3            7            6          2  \n",
       "4       22  50004        0            0            0            0          0  "
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "hh.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Persons"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'../../data_warehouse/exampville_persons.csv.gz'"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "larch.exampville.files.person"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "pp = pandas.read_csv( larch.exampville.files.person )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "doc_only": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 12349 entries, 0 to 12348\n",
      "Data columns (total 12 columns):\n",
      " #   Column         Non-Null Count  Dtype\n",
      "---  ------         --------------  -----\n",
      " 0   PERSONID       12349 non-null  int64\n",
      " 1   HHID           12349 non-null  int64\n",
      " 2   HHIDX          12349 non-null  int64\n",
      " 3   AGE            12349 non-null  int64\n",
      " 4   WORKS          12349 non-null  int64\n",
      " 5   N_WORK_TOURS   12349 non-null  int64\n",
      " 6   N_OTHER_TOURS  12349 non-null  int64\n",
      " 7   N_TOURS        12349 non-null  int64\n",
      " 8   N_TRIPS        12349 non-null  int64\n",
      " 9   N_TRIPS_HBW    12349 non-null  int64\n",
      " 10  N_TRIPS_HBO    12349 non-null  int64\n",
      " 11  N_TRIPS_NHB    12349 non-null  int64\n",
      "dtypes: int64(12)\n",
      "memory usage: 1.1 MB\n"
     ]
    }
   ],
   "source": [
    "pp.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PERSONID</th>\n",
       "      <th>HHID</th>\n",
       "      <th>HHIDX</th>\n",
       "      <th>AGE</th>\n",
       "      <th>WORKS</th>\n",
       "      <th>N_WORK_TOURS</th>\n",
       "      <th>N_OTHER_TOURS</th>\n",
       "      <th>N_TOURS</th>\n",
       "      <th>N_TRIPS</th>\n",
       "      <th>N_TRIPS_HBW</th>\n",
       "      <th>N_TRIPS_HBO</th>\n",
       "      <th>N_TRIPS_NHB</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>60000</td>\n",
       "      <td>50000</td>\n",
       "      <td>0</td>\n",
       "      <td>33</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>60001</td>\n",
       "      <td>50000</td>\n",
       "      <td>0</td>\n",
       "      <td>27</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>60002</td>\n",
       "      <td>50000</td>\n",
       "      <td>0</td>\n",
       "      <td>31</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>60003</td>\n",
       "      <td>50000</td>\n",
       "      <td>0</td>\n",
       "      <td>81</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>60004</td>\n",
       "      <td>50001</td>\n",
       "      <td>1</td>\n",
       "      <td>39</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   PERSONID   HHID  HHIDX  AGE  WORKS  N_WORK_TOURS  N_OTHER_TOURS  N_TOURS  \\\n",
       "0     60000  50000      0   33      1             1              0        1   \n",
       "1     60001  50000      0   27      1             1              1        2   \n",
       "2     60002  50000      0   31      1             1              1        2   \n",
       "3     60003  50000      0   81      0             0              2        2   \n",
       "4     60004  50001      1   39      1             1              0        1   \n",
       "\n",
       "   N_TRIPS  N_TRIPS_HBW  N_TRIPS_HBO  N_TRIPS_NHB  \n",
       "0        2            2            0            0  \n",
       "1        4            2            2            0  \n",
       "2        5            2            2            1  \n",
       "3        4            0            4            0  \n",
       "4        4            1            1            2  "
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pp.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Tours"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'../../data_warehouse/exampville_tours.csv.gz'"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "larch.exampville.files.tour"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "tour = pandas.read_csv( larch.exampville.files.tour )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "doc_only": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 20739 entries, 0 to 20738\n",
      "Data columns (total 11 columns):\n",
      " #   Column       Non-Null Count  Dtype\n",
      "---  ------       --------------  -----\n",
      " 0   TOURID       20739 non-null  int64\n",
      " 1   HHID         20739 non-null  int64\n",
      " 2   PERSONID     20739 non-null  int64\n",
      " 3   DTAZ         20739 non-null  int64\n",
      " 4   TOURMODE     20739 non-null  int64\n",
      " 5   TOURPURP     20739 non-null  int64\n",
      " 6   N_STOPS      20739 non-null  int64\n",
      " 7   N_TRIPS      20739 non-null  int64\n",
      " 8   N_TRIPS_HBW  20739 non-null  int64\n",
      " 9   N_TRIPS_HBO  20739 non-null  int64\n",
      " 10  N_TRIPS_NHB  20739 non-null  int64\n",
      "dtypes: int64(11)\n",
      "memory usage: 1.7 MB\n"
     ]
    }
   ],
   "source": [
    "tour.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>TOURID</th>\n",
       "      <th>HHID</th>\n",
       "      <th>PERSONID</th>\n",
       "      <th>DTAZ</th>\n",
       "      <th>TOURMODE</th>\n",
       "      <th>TOURPURP</th>\n",
       "      <th>N_STOPS</th>\n",
       "      <th>N_TRIPS</th>\n",
       "      <th>N_TRIPS_HBW</th>\n",
       "      <th>N_TRIPS_HBO</th>\n",
       "      <th>N_TRIPS_NHB</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>50000</td>\n",
       "      <td>60000</td>\n",
       "      <td>22</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>50000</td>\n",
       "      <td>60001</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>50000</td>\n",
       "      <td>60001</td>\n",
       "      <td>10</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>50000</td>\n",
       "      <td>60002</td>\n",
       "      <td>20</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>50000</td>\n",
       "      <td>60002</td>\n",
       "      <td>20</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   TOURID   HHID  PERSONID  DTAZ  TOURMODE  TOURPURP  N_STOPS  N_TRIPS  \\\n",
       "0       0  50000     60000    22         1         1        0        2   \n",
       "1       1  50000     60001     4         1         1        0        2   \n",
       "2       2  50000     60001    10         2         2        0        2   \n",
       "3       3  50000     60002    20         1         1        0        2   \n",
       "4       4  50000     60002    20         1         2        1        3   \n",
       "\n",
       "   N_TRIPS_HBW  N_TRIPS_HBO  N_TRIPS_NHB  \n",
       "0            2            0            0  \n",
       "1            2            0            0  \n",
       "2            0            2            0  \n",
       "3            2            0            0  \n",
       "4            0            2            1  "
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tour.head()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
